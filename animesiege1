local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
_G.AutoSpin = false
local Window = Rayfield:CreateWindow({
    Name = "Ascension Hub",
    Icon = 0,
    LoadingTitle = "Ascension Hub - Anime Siege ( PATCHED )",
    LoadingSubtitle = "Join the server for more scripts!",
    Theme = "Default",
    DisableRayfieldPrompts = true,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Ascension Hub"
    },
    Discord = {
        Enabled = true,
        Invite = "hsd2uMA7er",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "Key",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "12371479123",
        SaveKey = false,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

Rayfield:Notify({
    Title = "Thanks for using Ascension Hub",
    Content = "Join our discord server for more scripts and updates and if you have bugs",
    Duration = 5,
    Image = 4483362458,
})

local rs = game:GetService("ReplicatedStorage")
local event = rs:WaitForChild("ReliableRedEvent")
local player = game.Players.LocalPlayer
local gui = player.PlayerGui:WaitForChild("ScreenGui") -- Assumes ScreenGui exists in PlayerGui

local infoTab = Window:CreateTab("Info", 4483362458)
local infoSection = infoTab:CreateSection("Info")

local discordButton = infoTab:CreateButton({
    Name = "Join our Discord",
    Callback = function()
        setclipboard("https://discord.gg/hsd2uMA7er")
        Rayfield:Notify({
            Title = "Discord Invite Copied!",
            Content = "The invite link has been copied to your clipboard. Paste it into your browser to join.",
            Duration = 5,
            Image = 4483362458,
        })
    end,
})

local Divider = infoTab:CreateDivider()

local playerTab = Window:CreateTab("Player", 4483362458)
local playerSection = playerTab:CreateSection("Player")

local walkspeedSlider = playerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 100},
    Increment = 1,
    Suffix = "Walkspeed",
    CurrentValue = 10,
    Flag = "Walkspeed",
    Callback = function(walkspeed)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.WalkSpeed = walkspeed
        end
    end,
})

local noclipConnection

local noclipToggle = playerTab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Flag = "NoclipToggle",
    Callback = function(noclipValue)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        if noclipValue then
            noclipConnection = game:GetService("RunService").Stepped:Connect(function()
                if character then
                    for _, part in pairs(character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if noclipConnection then
                noclipConnection:Disconnect()
                noclipConnection = nil
            end
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end,
})

local rerollTab = Window:CreateTab("Reroll", 4483362458) -- Title, Image
local rerollSection = rerollTab:CreateSection("Reroll")

local isRunning = false -- Initially stopped
local forceStop = false
local cleanValue = nil
local cleanUnitId = nil

local function getAllTraits()
    local plr = game.Players.LocalPlayer
    local gui = plr.PlayerGui:WaitForChild("TraitReroll")
    local traitGui = gui:WaitForChild("trait")
    local traits = traitGui:WaitForChild("traits")

    local traitNames = {}

    for _, template in pairs(traits:GetChildren()) do
        if template:IsA("Frame") then
            local trait = template:FindFirstChild("name")
            if trait then
                table.insert(traitNames, trait.Text)
            end
        end
    end

    return traitNames
end

local firstValueInput = rerollTab:CreateInput({
    Name = "First Value",
    CurrentValue = "",
    PlaceholderText = "Enter First Value",
    RemoveTextAfterFocusLost = false,
    Flag = "firstValueInput",
    Callback = function(firstValue)
        _G.First = tostring(firstValue) -- Convert to string
    end,
})

local rerollUnitIdInput = rerollTab:CreateInput({
    Name = "Unit ID",
    CurrentValue = "",
    PlaceholderText = "Enter Unit ID",
    RemoveTextAfterFocusLost = false,
    Flag = "unitIdInput",
    Callback = function(unitId)
_G.Second = tostring(unitId) -- Convert to string
    end,
})

local selectedTrait = nil

local traitDropdown = rerollTab:CreateDropdown({
    Name = "Select Trait",
    Options = {
        "Superior I", "Superior II", "Superior III",
        "Swift I", "Swift II", "Swift III",
        "Range I", "Range II", "Range III",
        "Adept", "Executioner", "Sniper", "Godspeed",
        "Finisher", "Rainbow", "Godly", "Exclusive", "Liege"
    },
    MultiSelect = false,
    Flag = "traitDropdown",
    Callback = function(traitChosen)
        -- If it's a table, grab the first element
        if typeof(traitChosen) == "table" then
_G.SelectedTrait = traitChosen[1]
        elseif typeof(traitChosen) == "string" then
_G.SelectedTrait = traitChosen
        Rayfield:Notify({
            Title = "Trait Notification",
            Content = "Selected Trait: " .. _G.SelectedTrait,
            Duration = 5,
            Image = 4483362458,
        })
        end
    end,
})

local stopRerollButton = rerollTab:CreateButton({
    Name = "Stop Reroll",
    Callback = function()
        _G.AutoSpin = false
                Rayfield:Notify({
            Title = "Trait Notification",
            Content = "Stopped Rerolling.",
            Duration = 5,
            Image = 4483362458,
        })
    end,
})

local rerollButton = rerollTab:CreateButton({
    Name = "Reroll",
    Callback = function()
        Rayfield:Notify({
            Title = "Trait Notification",
            Content = "Started Rerolling.",
            Duration = 5,
            Image = 4483362458,
        })
_G.AutoSpin = true -- true/false
if _G.AutoSpin then
local args = { -- spin once to ensure that the gui is there when checking (it bugs if there isnt a spin)
    [1] = {},
    [2] = {
        ["/"] = {
            [1] = {
                [1] = _G.First,
                [2] = _G.Second,
                [3] = false,
                ["n"] = 3
            }
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("ReliableRedEvent"):FireServer(unpack(args))
end
task.wait(0.2) -- a wait to ensure the gui loads properly
while _G.AutoSpin do
for i,v in game.Players.LocalPlayer.PlayerGui.TraitReroll.trait.traits:GetChildren() do
if v:FindFirstChild("UIScale") and v:FindFirstChild("name") then
if v.name.Text == _G.SelectedTrait then
        Rayfield:Notify({
            Title = "Trait Notification",
            Content = "Spinned Trait: " .. _G.SelectedTrait,
            Duration = 5,
            Image = 4483362458,
        })
_G.AutoSpin = false
break
else
local args = {
    [1] = {},
    [2] = {
        ["/"] = {
            [1] = {
                [1] = _G.First,
                [2] = _G.Second,
                [3] = false,
                ["n"] = 3
            }
        }
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("ReliableRedEvent"):FireServer(unpack(args))
print("spinned trait: " .. v.name.Text .. "")
end
end
end
task.wait(0.2)
end
    end,
})

local miscTab = Window:CreateTab("Misc", 4483362458)
local miscSection = miscTab:CreateSection("Misc")

-- Infinite Yield Button
local iyButton = miscTab:CreateButton({
    Name = "Infinite Yield",
    Callback = function()
        local success, err = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
        end)
        if not success then
            warn("Failed to load Infinite Yield:", err)
        end
    end,
})

-- Simple Spy Button
local rSpyButton = miscTab:CreateButton({
    Name = "Simple Spy",
    Callback = function()
        local success, err = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/SimpleSpyV3/main.lua"))()
        end)
        if not success then
            warn("Failed to load Simple Spy:", err)
        end
    end,
})

local redeemAllCodesButton = miscTab:CreateButton({
    Name = "Redeem All Codes",
    Callback = function()
        local codes = {
            "2K SPECIAL!",
            "SorryForShutdown!",  -- Add more codes here as needed
            "5K Likes!",
            "RELEASE!",
            "1M Visits!",
            "Changes!"
        }
        
        local args1 = {
            [1] = {
                ["\1"] = {}
            },
            [2] = {}
        }

        -- Loop through each code in the list
        for _, code in ipairs(codes) do
            -- Reset the args for each new code
            args1[1]["\1"][1] = {
                [1] = code,  -- Set the code
                ["n"] = 1    -- Set any additional data you need
            }
            
            -- Fire the event with the current code
            event:FireServer(unpack(args1))
            wait(1)  -- Optional: add a delay between requests if needed
        end
    end,
})

local cautionTab = Window:CreateTab("Caution", 4483362458)
local cautionSection = cautionTab:CreateSection("Caution")

local wipeDataButton = cautionTab:CreateButton({
    Name = "Wipe Data",
    Callback = function()
        local success, err = pcall(function()
            local wipeDataEvent = rs:WaitForChild("Shared"):WaitForChild("Commands"):WaitForChild("Wipe_Data")
            wipeDataEvent:FireServer()
        end)
        if not success then
            warn("Failed to wipe database:", err)
        end
    end,
})
