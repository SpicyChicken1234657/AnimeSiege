			local toggled = default

			toggleBtn.MouseButton1Click:Connect(function()
				toggled = not toggled
				toggleBtn.BackgroundColor3 = toggled and Library.Theme.Accent or Color3.fromRGB(70, 70, 70)
				pcall(callback, toggled)
			end)

			return toggleFrame
		end

		function sectionObj:AddSlider(text, min, max, default, callback)
			local sliderFrame = Instance.new("Frame", contentHolder)
			sliderFrame.Size = UDim2.new(1, 0, 0, 50)
			sliderFrame.BackgroundTransparency = 1

			local label = Instance.new("TextLabel", sliderFrame)
			label.Size = UDim2.new(0.7, 0, 0, 20)
			label.Position = UDim2.new(0, 10, 0, 0)
			label.BackgroundTransparency = 1
			label.Text = text .. " (" .. tostring(default) .. ")"
			label.TextColor3 = Library.Theme.Text
			label.Font = Enum.Font.Gotham
			label.TextSize = 18
			label.TextXAlignment = Enum.TextXAlignment.Left

			local sliderBar = Instance.new("Frame", sliderFrame)
			sliderBar.Size = UDim2.new(0.9, 0, 0, 10)
			sliderBar.Position = UDim2.new(0.05, 0, 1, -25)
			sliderBar.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
			sliderBar.BorderSizePixel = 0
			sliderBar.ClipsDescendants = true

			local sliderFill = Instance.new("Frame", sliderBar)
			sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
			sliderFill.BackgroundColor3 = Library.Theme.Accent
			sliderFill.BorderSizePixel = 0

			local draggingSlider = false
			local conn

			local function updateSlider(pos)
				local relativePos = math.clamp((pos.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
				sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
				local val = math.floor(min + relativePos * (max - min))
				label.Text = text .. " (" .. val .. ")"
				pcall(callback, val)
			end

			sliderBar.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					draggingSlider = true
					updateSlider(input.Position)
					conn = UserInputService.InputChanged:Connect(function(input2)
						if draggingSlider and input2.UserInputType == Enum.UserInputType.MouseMovement then
							updateSlider(input2.Position)
						end
					end)
				end
			end)

			UserInputService.InputEnded:Connect(function(input)
				if draggingSlider and input.UserInputType == Enum.UserInputType.MouseButton1 then
					draggingSlider = false
					if conn then
						conn:Disconnect()
						conn = nil
					end
				end
			end)

			return sliderFrame
		end

		function sectionObj:AddButton(text, callback)
			local buttonFrame = Instance.new("Frame", contentHolder)
			buttonFrame.Size = UDim2.new(1, 0, 0, 35)
			buttonFrame.BackgroundTransparency = 1

			local button = Instance.new("TextButton", buttonFrame)
			button.Size = UDim2.new(1, 0, 1, 0)
			button.BackgroundColor3 = Library.Theme.Accent
			button.BorderSizePixel = 0
			button.Text = text
			button.Font = Enum.Font.GothamBold
			button.TextColor3 = Library.Theme.Text
			button.TextSize = 18
			button.AutoButtonColor = false

			button.MouseButton1Click:Connect(function()
				pcall(callback)
			end)

			return buttonFrame
		end

		function sectionObj:AddTextbox(placeholder, callback)
			local textboxFrame = Instance.new("Frame", contentHolder)
			textboxFrame.Size = UDim2.new(1, 0, 0, 35)
			textboxFrame.BackgroundTransparency = 1

			local textbox = Instance.new("TextBox", textboxFrame)
			textbox.Size = UDim2.new(1, 0, 1, 0)
			textbox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
			textbox.BorderSizePixel = 0
			textbox.TextColor3 = Library.Theme.Text
			textbox.Font = Enum.Font.Gotham
			textbox.TextSize = 18
			textbox.PlaceholderText = placeholder or ""
			textbox.ClearTextOnFocus = false

			textbox.FocusLost:Connect(function(enterPressed)
				if enterPressed then
					pcall(callback, textbox.Text)
				end
			end)

			return textboxFrame
		end

		function sectionObj:AddDropdown(text, options, callback)
			local dropdownFrame = Instance.new("Frame", contentHolder)
			dropdownFrame.Size = UDim2.new(1, 0, 0, 40)
			dropdownFrame.BackgroundTransparency = 1

			local label = Instance.new("TextLabel", dropdownFrame)
			label.Size = UDim2.new(0.7, 0, 1, 0)
			label.Position = UDim2.new(0, 10, 0, 0)
			label.BackgroundTransparency = 1
			label.Text = text
			label.TextColor3 = Library.Theme.Text
			label.Font = Enum.Font.Gotham
			label.TextSize = 18
			label.TextXAlignment = Enum.TextXAlignment.Left

			local button = Instance.new("TextButton", dropdownFrame)
			button.Size = UDim2.new(0.3, -10, 1, 0)
			button.Position = UDim2.new(0.7, 10, 0, 0)
			button.Text = "Select"
			button.Font = Enum.Font.GothamBold
			button.TextSize = 18
			button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
			button.TextColor3 = Library.Theme.Text
			button.BorderSizePixel = 0
			button.AutoButtonColor = false

			local dropdownList = Instance.new("ScrollingFrame", dropdownFrame)
			dropdownList.Size = UDim2.new(0.3, 0, 0, 0)
			dropdownList.Position = UDim2.new(0.7, 0, 1, 0)
			dropdownList.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
			dropdownList.BorderSizePixel = 0
			dropdownList.CanvasSize = UDim2.new(0, 0, 0, 0)
			dropdownList.ScrollBarThickness = 4
			dropdownList.Visible = false
			dropdownList.ClipsDescendants = true

			local layout = Instance.new("UIListLayout", dropdownList)
			layout.SortOrder = Enum.SortOrder.LayoutOrder

			local selected = nil

			local function updateDropdownSize()
				local totalSize = #dropdownList:GetChildren() - 1 -- minus layout
				dropdownList.CanvasSize = UDim2.new(0, 0, 0, totalSize * 30)
				dropdownList.Size = UDim2.new(0.3, 0, 0, math.min(totalSize * 30, 150))
			end

			for i, option in ipairs(options) do
				local optionBtn = Instance.new("TextButton", dropdownList)
				optionBtn.Size = UDim2.new(1, 0, 0, 30)
				optionBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
				optionBtn.BorderSizePixel = 0
				optionBtn.Text = option
				optionBtn.Font = Enum.Font.Gotham
				optionBtn.TextSize = 18
				optionBtn.TextColor3 = Library.Theme.Text
				optionBtn.AutoButtonColor = false
				optionBtn.LayoutOrder = i

				optionBtn.MouseButton1Click:Connect(function()
					selected = option
					button.Text = option
					dropdownList.Visible = false
					pcall(callback, option)
				end)
			end

			updateDropdownSize()

			button.MouseButton1Click:Connect(function()
				dropdownList.Visible = not dropdownList.Visible
			end)

			return dropdownFrame
		end

		return sectionObj
	end

	table.insert(self.Tabs, tabObj)
	table.insert(self.TabButtons, tabButton)

	tabButton.MouseButton1Click:Connect(function()
		if self.CurrentTab then
			self.CurrentTab.Frame.Visible = false
			self.CurrentTab.Button.BackgroundTransparency = 0.2
		end
		tabFrame.Visible = true
		tabButton.BackgroundTransparency = 0
		self.CurrentTab = {Frame = tabFrame, Button = tabButton, Tab = tabObj}
	end)

	if #self.Tabs == 1 then
		tabButton:CaptureFocus()
		tabButton.MouseButton1Click:Fire()
	end

	return tabObj
end

return self

end
return Library
