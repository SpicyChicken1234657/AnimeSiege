local cleanValue = nil
local cleanUnitId = nil

local rerollUnitIdInput = rerollTab:CreateInput({
    Name = "Unit ID",
    CurrentValue = "",
    PlaceholderText = "Enter Unit ID",
    RemoveTextAfterFocusLost = false,
    Flag = "unitIdInput",
    Callback = function(unitId)
        cleanUnitId = tostring(unitId):gsub("\\", "\\\\")
        cleanUnitId = '"' .. cleanUnitId .. '"'
        print("Cleaned Unit ID:", cleanUnitId)
    end,
})

local firstValueInput = rerollTab:CreateInput({
    Name = "First Value",
    CurrentValue = "",
    PlaceholderText = "Enter First Value",
    RemoveTextAfterFocusLost = false,
    Flag = "firstValueInput",
    Callback = function(firstValue)
        cleanValue = '"' .. tostring(firstValue):gsub("\\", "\\") .. '"'
        print("Cleaned First Value:", cleanValue)
    end,
})

local rerollButton = rerollTab:CreateButton({
    Name = "Reroll",
    Callback = function()
        if not cleanValue or not cleanUnitId then
            warn("Error: Unit ID or First Value is missing!")
            return
        end

        isRunning = true
        forceStop = false

        -- Define the args structure with explicit string conversions
        local args = {
            [1] = {"\\1"}, -- This is a string, not a table
            [2] = {
                ["/"] = {
                    [1] = cleanValue or "nil", -- Use global cleanValue
                    [2] = cleanUnitId or "nil", -- Use global cleanUnitId
                    [3] = "false", -- Use string "false"
                    ["n"] = "3" -- This is also a string now
                }
            }
        }

        -- DEBUG: Print the final structure of args before firing the event
        print("Final Args Structure:")
        for i, v in pairs(args) do
            if type(v) == "table" then
                print("Args[" .. i .. "] is a table:")
                for subKey, subValue in pairs(v) do
                    if type(subValue) == "table" then
                        print("  " .. subKey .. " is a nested table:")
                        for nestedKey, nestedValue in pairs(subValue) do
                            print("    " .. nestedKey .. " = " .. tostring(nestedValue))
                        end
                    else
                        print("  " .. subKey .. " = " .. tostring(subValue))
                    end
                end
            else
                print("Args[" .. i .. "] = " .. tostring(v))
            end
        end

        while isRunning do
            local speed = speedSlider.CurrentValue -- Use the slider's current value for speed

            -- Fire the server event
            event:FireServer(unpack(args))
            wait(speed)

            -- Get all traits and check for rare traits
            local traits = getAllTraits()
            local currentTrait = selectedTrait or "None"
            for _, trait in pairs(traits) do
                print("Current Trait:", trait)
                if trait == selectedTrait then
                    print("Got a rare trait (" .. trait .. ")! Forcefully stopping reroll.")
                    isRunning = false
                    forceStop = true
                    break
                end
            end

            -- Stop the loop if forceStop is true
            if forceStop then
                break
            end
        end

        if not isRunning then
            print("Reroll process has stopped.")
        end
    end,
})
