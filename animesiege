local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
.            noclipConnection = game:GetService("RunService").Stepped:Connect(function()
                if character then
                    for _, part in pairs(character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if noclipConnection then
                noclipConnection:Disconnect()
                noclipConnection = nil
            end
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end,
})

local rerollTab = Window:CreateTab("Reroll", 4483362458) -- Title, Image
local rerollSection = rerollTab:CreateSection("Reroll")

local isRunning = false -- Initially stopped
local forceStop = false
local cleanValue = nil
local cleanUnitId = nil

local function getAllTraits()
    local plr = game.Players.LocalPlayer
    local gui = plr.PlayerGui:WaitForChild("TraitReroll")
    local traitGui = gui:WaitForChild("trait")
    local traits = traitGui:WaitForChild("traits")

    local traitNames = {}

    for _, template in pairs(traits:GetChildren()) do
        if template:IsA("Frame") then
            local trait = template:FindFirstChild("name")
            if trait then
                table.insert(traitNames, trait.Text)
            else
                print("No trait found in this template")
            end
        end
    end

    return traitNames
end

local rerollUnitIdInput = rerollTab:CreateInput({
    Name = "Unit ID",
    CurrentValue = "",
    PlaceholderText = "Enter Unit ID",
    RemoveTextAfterFocusLost = false,
    Flag = "unitIdInput",
    Callback = function(unitId)
        cleanUnitId = tostring(unitId):gsub("\\", "\\\\")
        cleanUnitId = '"' .. cleanUnitId .. '"'
        print("Cleaned Unit ID:", cleanUnitId)
    end,
})

local firstValueInput = rerollTab:CreateInput({
    Name = "First Value",
    CurrentValue = "",
    PlaceholderText = "Enter First Value",
    RemoveTextAfterFocusLost = false,
    Flag = "firstValueInput",
    Callback = function(firstValue)
        cleanValue = '"' .. tostring(firstValue):gsub("\\", "\\") .. '"'
        print("Cleaned First Value:", cleanValue)
    end,
})

local speedSlider = rerollTab:CreateSlider({
    Name = "Speed",
    Range = {0.15, 2},
    Increment = 0.05,
    Suffix = "Delay",
    CurrentValue = 0.5,
    Flag = "delaySlider",
    Callback = function(speed)
        local speed = tonumber(speed)
        return speed
    end,
})

local selectedTrait = nil

local traitDropdown = rerollTab:CreateDropdown({
    Name = "Select Trait",
    Options = {
        "Superior I", "Superior II", "Superior III",
        "Swift I", "Swift II", "Swift III",
        "Range I", "Range II", "Range III",
        "Adept", "Executioner", "Sniper", "Godspeed",
        "Finisher", "Rainbow", "Godly", "Exclusive", "Liege"
    },
    MultiSelect = false,
    Flag = "traitDropdown",
    Callback = function(traitChosen)
        -- If it's a table, grab the first element
        if typeof(traitChosen) == "table" then
            selectedTrait = traitChosen[1]
        elseif typeof(traitChosen) == "string" then
            selectedTrait = traitChosen
        end

        if selectedTrait then
            print("Selected Trait: " .. selectedTrait)
        else
            warn("Invalid trait selection:", traitChosen)
        end
    end,
})

local stopRerollButton = rerollTab:CreateButton({
    Name = "Stop Reroll",
    Callback = function()
        isRunning = false
        print("Reroll stopped by user.")
    end,
})

local rerollButton = rerollTab:CreateButton({
    Name = "Reroll",
    Callback = function()
        if not cleanValue or not cleanUnitId then
            warn("Error: Unit ID or First Value is missing!")
            return
        end

        isRunning = true
        forceStop = false

        -- Ensure the values are correctly formatted as strings
        cleanValue = tostring(cleanValue):gsub("\\", "\\\\"):gsub("\"", "\\\"")  -- Clean up any backslashes or quotes
        cleanUnitId = tostring(cleanUnitId):gsub("\\", "\\\\"):gsub("\"", "\\\"")

        -- Debug print to check formatted values
        print("Cleaned cleanValue:", cleanValue)
        print("Cleaned cleanUnitId:", cleanUnitId)

        -- Define the args structure with formatted cleanValue and cleanUnitId
        local args = {
            [1] = {}, -- Empty table
            [2] = {
                ["/"] = {
                    [1] = cleanValue,       -- Cleaned and formatted cleanValue
                    [2] = cleanUnitId,      -- Cleaned and formatted cleanUnitId
                    [3] = "false",          -- "false" as a string
                    ["n"] = "3"             -- "3" as a string
                }
            }
        }

        -- DEBUG: Print the final structure of args before firing the event
        print("Final Args Structure:")
        for i, v in pairs(args) do
            if type(v) == "table" then
                print("Args[" .. i .. "] is a table:")
                for subKey, subValue in pairs(v) do
                    if type(subValue) == "table" then
                        print("  " .. subKey .. " is a nested table:")
                        for nestedKey, nestedValue in pairs(subValue) do
                            print("    " .. nestedKey .. " = " .. tostring(nestedValue))
                        end
                    else
                        print("  " .. subKey .. " = " .. tostring(subValue))
                    end
                end
            else
                print("Args[" .. i .. "] = " .. tostring(v))
            end
        end

        -- Fire the event
        while isRunning do
            local speed = speedSlider.CurrentValue -- Use the slider's current value for speed

            -- Fire the server event
            event:FireServer(unpack(args))
            wait(speed)

            -- Check for traits and stop reroll if a rare trait is found
            local traits = getAllTraits()
            local currentTrait = selectedTrait or "None"
            for _, trait in pairs(traits) do
                print("Current Trait:", trait)
                if trait == selectedTrait then
                    print("Got a rare trait (" .. trait .. ")! Forcefully stopping reroll.")
                    isRunning = false
                    forceStop = true
                    break
                end
            end

            -- Stop the loop if forceStop is true
            if forceStop then
                break
            end
        end

        if not isRunning then
            print("Reroll process has stopped.")
        end
    end,
})
