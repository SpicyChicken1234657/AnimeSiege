local rerollButton = rerollTab:CreateButton({
    Name = "Reroll",
    Callback = function()
        if not cleanValue or not cleanUnitId then
            warn("Error: Unit ID or First Value is missing!")
            return
        end

        isRunning = true
        forceStop = false

        -- Ensure the values are correctly formatted as strings
        cleanValue = tostring(cleanValue):gsub("\\", "\\\\"):gsub("\"", "\\\"")  -- Clean up any backslashes or quotes
        cleanUnitId = tostring(cleanUnitId):gsub("\\", "\\\\"):gsub("\"", "\\\"")

        -- Debug print to check formatted values
        print("Cleaned cleanValue:", cleanValue)
        print("Cleaned cleanUnitId:", cleanUnitId)

        -- Define the args structure with formatted cleanValue and cleanUnitId
        local args = {
            [1] = {}, -- Empty table
            [2] = {
                ["/"] = {
                    [1] = cleanValue,       -- Cleaned and formatted cleanValue
                    [2] = cleanUnitId,      -- Cleaned and formatted cleanUnitId
                    [3] = "false",          -- "false" as a string
                    ["n"] = "3"             -- "3" as a string
                }
            }
        }

        -- DEBUG: Print the final structure of args before firing the event
        print("Final Args Structure:")
        for i, v in pairs(args) do
            if type(v) == "table" then
                print("Args[" .. i .. "] is a table:")
                for subKey, subValue in pairs(v) do
                    if type(subValue) == "table" then
                        print("  " .. subKey .. " is a nested table:")
                        for nestedKey, nestedValue in pairs(subValue) do
                            print("    " .. nestedKey .. " = " .. tostring(nestedValue))
                        end
                    else
                        print("  " .. subKey .. " = " .. tostring(subValue))
                    end
                end
            else
                print("Args[" .. i .. "] = " .. tostring(v))
            end
        end

        -- Fire the event
        while isRunning do
            local speed = speedSlider.CurrentValue -- Use the slider's current value for speed

            -- Fire the server event
            event:FireServer(unpack(args))
            wait(speed)

            -- Check for traits and stop reroll if a rare trait is found
            local traits = getAllTraits()
            local currentTrait = selectedTrait or "None"
            for _, trait in pairs(traits) do
                print("Current Trait:", trait)
                if trait == selectedTrait then
                    print("Got a rare trait (" .. trait .. ")! Forcefully stopping reroll.")
                    isRunning = false
                    forceStop = true
                    break
                end
            end

            -- Stop the loop if forceStop is true
            if forceStop then
                break
            end
        end

        if not isRunning then
            print("Reroll process has stopped.")
        end
    end,
})
